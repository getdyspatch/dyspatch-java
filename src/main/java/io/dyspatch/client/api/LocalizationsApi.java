/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.11
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiCallback;
import io.dyspatch.client.ApiClient;
import io.dyspatch.client.ApiException;
import io.dyspatch.client.ApiResponse;
import io.dyspatch.client.Configuration;
import io.dyspatch.client.Pair;
import io.dyspatch.client.ProgressRequestBody;
import io.dyspatch.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.LocalizationRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocalizationsApi {
    private ApiClient localVarApiClient;

    public LocalizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocalizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getDraftLocalizationById
     * @param draftId A draft ID (required)
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object from the matching draft ID with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftLocalizationByIdCall(String draftId, String localizationId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/localizations/{localizationId}/drafts/{draftId}"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "localizationId" + "\\}", localVarApiClient.escapeString(localizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftLocalizationByIdValidateBeforeCall(String draftId, String localizationId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling getDraftLocalizationById(Async)");
        }
        
        // verify the required parameter 'localizationId' is set
        if (localizationId == null) {
            throw new ApiException("Missing the required parameter 'localizationId' when calling getDraftLocalizationById(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling getDraftLocalizationById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getDraftLocalizationById(Async)");
        }
        

        okhttp3.Call localVarCall = getDraftLocalizationByIdCall(draftId, localizationId, targetLanguage, accept, _callback);
        return localVarCall;

    }

    /**
     * Get Draft Localization Object by ID
     * Returns a specific localization object of the matching draft with a matching localization ID
     * @param draftId A draft ID (required)
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return LocalizationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object from the matching draft ID with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public LocalizationRead getDraftLocalizationById(String draftId, String localizationId, String targetLanguage, String accept) throws ApiException {
        ApiResponse<LocalizationRead> localVarResp = getDraftLocalizationByIdWithHttpInfo(draftId, localizationId, targetLanguage, accept);
        return localVarResp.getData();
    }

    /**
     * Get Draft Localization Object by ID
     * Returns a specific localization object of the matching draft with a matching localization ID
     * @param draftId A draft ID (required)
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;LocalizationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object from the matching draft ID with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<LocalizationRead> getDraftLocalizationByIdWithHttpInfo(String draftId, String localizationId, String targetLanguage, String accept) throws ApiException {
        okhttp3.Call localVarCall = getDraftLocalizationByIdValidateBeforeCall(draftId, localizationId, targetLanguage, accept, null);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Draft Localization Object by ID (asynchronously)
     * Returns a specific localization object of the matching draft with a matching localization ID
     * @param draftId A draft ID (required)
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object from the matching draft ID with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftLocalizationByIdAsync(String draftId, String localizationId, String targetLanguage, String accept, final ApiCallback<LocalizationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftLocalizationByIdValidateBeforeCall(draftId, localizationId, targetLanguage, accept, _callback);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublishedLocalizationById
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishedLocalizationByIdCall(String localizationId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/localizations/{localizationId}"
            .replaceAll("\\{" + "localizationId" + "\\}", localVarApiClient.escapeString(localizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishedLocalizationByIdValidateBeforeCall(String localizationId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'localizationId' is set
        if (localizationId == null) {
            throw new ApiException("Missing the required parameter 'localizationId' when calling getPublishedLocalizationById(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling getPublishedLocalizationById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getPublishedLocalizationById(Async)");
        }
        

        okhttp3.Call localVarCall = getPublishedLocalizationByIdCall(localizationId, targetLanguage, accept, _callback);
        return localVarCall;

    }

    /**
     * Get Localization Object by ID
     * Returns the published content associated with the localization of the matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return LocalizationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public LocalizationRead getPublishedLocalizationById(String localizationId, String targetLanguage, String accept) throws ApiException {
        ApiResponse<LocalizationRead> localVarResp = getPublishedLocalizationByIdWithHttpInfo(localizationId, targetLanguage, accept);
        return localVarResp.getData();
    }

    /**
     * Get Localization Object by ID
     * Returns the published content associated with the localization of the matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;LocalizationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<LocalizationRead> getPublishedLocalizationByIdWithHttpInfo(String localizationId, String targetLanguage, String accept) throws ApiException {
        okhttp3.Call localVarCall = getPublishedLocalizationByIdValidateBeforeCall(localizationId, targetLanguage, accept, null);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Localization Object by ID (asynchronously)
     * Returns the published content associated with the localization of the matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A localization object with the requested ID </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishedLocalizationByIdAsync(String localizationId, String targetLanguage, String accept, final ApiCallback<LocalizationRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishedLocalizationByIdValidateBeforeCall(localizationId, targetLanguage, accept, _callback);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
