/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiCallback;
import io.dyspatch.client.ApiClient;
import io.dyspatch.client.ApiException;
import io.dyspatch.client.ApiResponse;
import io.dyspatch.client.Configuration;
import io.dyspatch.client.Pair;
import io.dyspatch.client.ProgressRequestBody;
import io.dyspatch.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.LocalizationRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocalizationsApi {
    private ApiClient apiClient;

    public LocalizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocalizationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for localizationsLocalizationIdGet
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call localizationsLocalizationIdGetCall(String localizationId, String targetLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/localizations/{localizationId}"
            .replaceAll("\\{" + "localizationId" + "\\}", apiClient.escapeString(localizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetLanguage", targetLanguage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call localizationsLocalizationIdGetValidateBeforeCall(String localizationId, String targetLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'localizationId' is set
        if (localizationId == null) {
            throw new ApiException("Missing the required parameter 'localizationId' when calling localizationsLocalizationIdGet(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling localizationsLocalizationIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = localizationsLocalizationIdGetCall(localizationId, targetLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Localization Object by ID
     * Returns a specific localization object with a matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @return LocalizationRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocalizationRead localizationsLocalizationIdGet(String localizationId, String targetLanguage) throws ApiException {
        ApiResponse<LocalizationRead> resp = localizationsLocalizationIdGetWithHttpInfo(localizationId, targetLanguage);
        return resp.getData();
    }

    /**
     * Get Localization Object by ID
     * Returns a specific localization object with a matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @return ApiResponse&lt;LocalizationRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocalizationRead> localizationsLocalizationIdGetWithHttpInfo(String localizationId, String targetLanguage) throws ApiException {
        com.squareup.okhttp.Call call = localizationsLocalizationIdGetValidateBeforeCall(localizationId, targetLanguage, null, null);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Localization Object by ID (asynchronously)
     * Returns a specific localization object with a matching ID
     * @param localizationId A localization ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call localizationsLocalizationIdGetAsync(String localizationId, String targetLanguage, final ApiCallback<LocalizationRead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = localizationsLocalizationIdGetValidateBeforeCall(localizationId, targetLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocalizationRead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
