/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiCallback;
import io.dyspatch.client.ApiClient;
import io.dyspatch.client.ApiException;
import io.dyspatch.client.ApiResponse;
import io.dyspatch.client.Configuration;
import io.dyspatch.client.Pair;
import io.dyspatch.client.ProgressRequestBody;
import io.dyspatch.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.Body;
import io.dyspatch.client.model.Body1;
import io.dyspatch.client.model.DraftRead;
import io.dyspatch.client.model.DraftsRead;
import io.dyspatch.client.model.LocalizationKeyRead;
import io.dyspatch.client.model.LocalizationMetaRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DraftsApi {
    private ApiClient apiClient;

    public DraftsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DraftsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for draftsDraftIdGet
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdGetCall(String draftId, String targetLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetLanguage", targetLanguage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdGetValidateBeforeCall(String draftId, String targetLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdGet(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling draftsDraftIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdGetCall(draftId, targetLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Draft by ID
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @return DraftRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DraftRead draftsDraftIdGet(String draftId, String targetLanguage) throws ApiException {
        ApiResponse<DraftRead> resp = draftsDraftIdGetWithHttpInfo(draftId, targetLanguage);
        return resp.getData();
    }

    /**
     * Get Draft by ID
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @return ApiResponse&lt;DraftRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DraftRead> draftsDraftIdGetWithHttpInfo(String draftId, String targetLanguage) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdGetValidateBeforeCall(draftId, targetLanguage, null, null);
        Type localVarReturnType = new TypeToken<DraftRead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Draft by ID (asynchronously)
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdGetAsync(String draftId, String targetLanguage, final ApiCallback<DraftRead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdGetValidateBeforeCall(draftId, targetLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DraftRead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdLocalizationKeysGet
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationKeysGetCall(String draftId, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizationKeys"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json", "text/vnd.dyspatch.2019.10+x-gettext-translation"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (accept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdLocalizationKeysGetValidateBeforeCall(String draftId, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationKeysGet(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationKeysGetCall(draftId, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get localization keys
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot; (optional)
     * @return List&lt;LocalizationKeyRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LocalizationKeyRead> draftsDraftIdLocalizationKeysGet(String draftId, String accept) throws ApiException {
        ApiResponse<List<LocalizationKeyRead>> resp = draftsDraftIdLocalizationKeysGetWithHttpInfo(draftId, accept);
        return resp.getData();
    }

    /**
     * Get localization keys
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot; (optional)
     * @return ApiResponse&lt;List&lt;LocalizationKeyRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LocalizationKeyRead>> draftsDraftIdLocalizationKeysGetWithHttpInfo(String draftId, String accept) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdLocalizationKeysGetValidateBeforeCall(draftId, accept, null, null);
        Type localVarReturnType = new TypeToken<List<LocalizationKeyRead>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get localization keys (asynchronously)
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationKeysGetAsync(String draftId, String accept, final ApiCallback<List<LocalizationKeyRead>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationKeysGetValidateBeforeCall(draftId, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LocalizationKeyRead>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdLocalizationsGet
     * @param draftId A draft ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsGetCall(String draftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdLocalizationsGetValidateBeforeCall(String draftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsGetCall(draftId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get localizations on a draft
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @return List&lt;LocalizationMetaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LocalizationMetaRead> draftsDraftIdLocalizationsGet(String draftId) throws ApiException {
        ApiResponse<List<LocalizationMetaRead>> resp = draftsDraftIdLocalizationsGetWithHttpInfo(draftId);
        return resp.getData();
    }

    /**
     * Get localizations on a draft
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @return ApiResponse&lt;List&lt;LocalizationMetaRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LocalizationMetaRead>> draftsDraftIdLocalizationsGetWithHttpInfo(String draftId) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsGetValidateBeforeCall(draftId, null, null);
        Type localVarReturnType = new TypeToken<List<LocalizationMetaRead>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get localizations on a draft (asynchronously)
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsGetAsync(String draftId, final ApiCallback<List<LocalizationMetaRead>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsGetValidateBeforeCall(draftId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LocalizationMetaRead>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdLocalizationsLanguageIdDelete
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdDeleteCall(String draftId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", apiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdDeleteValidateBeforeCall(String draftId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdDelete(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdDeleteCall(draftId, languageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a localization
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void draftsDraftIdLocalizationsLanguageIdDelete(String draftId, String languageId) throws ApiException {
        draftsDraftIdLocalizationsLanguageIdDeleteWithHttpInfo(draftId, languageId);
    }

    /**
     * Remove a localization
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> draftsDraftIdLocalizationsLanguageIdDeleteWithHttpInfo(String draftId, String languageId) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdDeleteValidateBeforeCall(draftId, languageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a localization (asynchronously)
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdDeleteAsync(String draftId, String languageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdDeleteValidateBeforeCall(draftId, languageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdLocalizationsLanguageIdPut
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdPutCall(String draftId, String languageId, Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", apiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdPutValidateBeforeCall(String draftId, String languageId, Body body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdPut(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling draftsDraftIdLocalizationsLanguageIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdPutCall(draftId, languageId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update a localization
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void draftsDraftIdLocalizationsLanguageIdPut(String draftId, String languageId, Body body) throws ApiException {
        draftsDraftIdLocalizationsLanguageIdPutWithHttpInfo(draftId, languageId, body);
    }

    /**
     * Create or update a localization
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> draftsDraftIdLocalizationsLanguageIdPutWithHttpInfo(String draftId, String languageId, Body body) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdPutValidateBeforeCall(draftId, languageId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or update a localization (asynchronously)
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdPutAsync(String draftId, String languageId, Body body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdPutValidateBeforeCall(draftId, languageId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdLocalizationsLanguageIdTranslationsPut
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdTranslationsPutCall(String draftId, String languageId, Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}/translations"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", apiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdTranslationsPutValidateBeforeCall(String draftId, String languageId, Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdTranslationsPutCall(draftId, languageId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set translations for language
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void draftsDraftIdLocalizationsLanguageIdTranslationsPut(String draftId, String languageId, Body1 body) throws ApiException {
        draftsDraftIdLocalizationsLanguageIdTranslationsPutWithHttpInfo(draftId, languageId, body);
    }

    /**
     * Set translations for language
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> draftsDraftIdLocalizationsLanguageIdTranslationsPutWithHttpInfo(String draftId, String languageId, Body1 body) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdTranslationsPutValidateBeforeCall(draftId, languageId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set translations for language (asynchronously)
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdLocalizationsLanguageIdTranslationsPutAsync(String draftId, String languageId, Body1 body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdLocalizationsLanguageIdTranslationsPutValidateBeforeCall(draftId, languageId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for draftsDraftIdPublishRequestPost
     * @param draftId A draft ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdPublishRequestPostCall(String draftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/publishRequest"
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDraftIdPublishRequestPostValidateBeforeCall(String draftId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDraftIdPublishRequestPost(Async)");
        }
        

        com.squareup.okhttp.Call call = draftsDraftIdPublishRequestPostCall(draftId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit the draft for approval
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void draftsDraftIdPublishRequestPost(String draftId) throws ApiException {
        draftsDraftIdPublishRequestPostWithHttpInfo(draftId);
    }

    /**
     * Submit the draft for approval
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> draftsDraftIdPublishRequestPostWithHttpInfo(String draftId) throws ApiException {
        com.squareup.okhttp.Call call = draftsDraftIdPublishRequestPostValidateBeforeCall(draftId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Submit the draft for approval (asynchronously)
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDraftIdPublishRequestPostAsync(String draftId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDraftIdPublishRequestPostValidateBeforeCall(draftId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for draftsGet
     * @param status Filter the list of drafts by a particular status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsGetCall(String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2019.10+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsGetValidateBeforeCall(String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = draftsGetCall(status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Drafts
     * Returns all drafts for your organization.
     * @param status Filter the list of drafts by a particular status (optional)
     * @return DraftsRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DraftsRead draftsGet(String status) throws ApiException {
        ApiResponse<DraftsRead> resp = draftsGetWithHttpInfo(status);
        return resp.getData();
    }

    /**
     * List Drafts
     * Returns all drafts for your organization.
     * @param status Filter the list of drafts by a particular status (optional)
     * @return ApiResponse&lt;DraftsRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DraftsRead> draftsGetWithHttpInfo(String status) throws ApiException {
        com.squareup.okhttp.Call call = draftsGetValidateBeforeCall(status, null, null);
        Type localVarReturnType = new TypeToken<DraftsRead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Drafts (asynchronously)
     * Returns all drafts for your organization.
     * @param status Filter the list of drafts by a particular status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsGetAsync(String status, final ApiCallback<DraftsRead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsGetValidateBeforeCall(status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DraftsRead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
