/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.11
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiCallback;
import io.dyspatch.client.ApiClient;
import io.dyspatch.client.ApiException;
import io.dyspatch.client.ApiResponse;
import io.dyspatch.client.Configuration;
import io.dyspatch.client.Pair;
import io.dyspatch.client.ProgressRequestBody;
import io.dyspatch.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.DraftRead;
import io.dyspatch.client.model.DraftsRead;
import io.dyspatch.client.model.InlineObject;
import io.dyspatch.client.model.LocalizationKeyRead;
import io.dyspatch.client.model.LocalizationMetaRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DraftsApi {
    private ApiClient localVarApiClient;

    public DraftsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DraftsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteLocalization
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLocalizationCall(String draftId, String languageId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", localVarApiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLocalizationValidateBeforeCall(String draftId, String languageId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling deleteLocalization(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling deleteLocalization(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteLocalization(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLocalizationCall(draftId, languageId, accept, _callback);
        return localVarCall;

    }

    /**
     * Remove a localization
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful delete </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLocalization(String draftId, String languageId, String accept) throws ApiException {
        deleteLocalizationWithHttpInfo(draftId, languageId, accept);
    }

    /**
     * Remove a localization
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLocalizationWithHttpInfo(String draftId, String languageId, String accept) throws ApiException {
        okhttp3.Call localVarCall = deleteLocalizationValidateBeforeCall(draftId, languageId, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a localization (asynchronously)
     * Deletes the localization with the given language ID if it exists
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLocalizationAsync(String draftId, String languageId, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLocalizationValidateBeforeCall(draftId, languageId, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDraftById
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A draft object with the requested ID. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftByIdCall(String draftId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftByIdValidateBeforeCall(String draftId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling getDraftById(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling getDraftById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getDraftById(Async)");
        }
        

        okhttp3.Call localVarCall = getDraftByIdCall(draftId, targetLanguage, accept, _callback);
        return localVarCall;

    }

    /**
     * Get Draft by ID
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return DraftRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A draft object with the requested ID. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public DraftRead getDraftById(String draftId, String targetLanguage, String accept) throws ApiException {
        ApiResponse<DraftRead> localVarResp = getDraftByIdWithHttpInfo(draftId, targetLanguage, accept);
        return localVarResp.getData();
    }

    /**
     * Get Draft by ID
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;DraftRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A draft object with the requested ID. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<DraftRead> getDraftByIdWithHttpInfo(String draftId, String targetLanguage, String accept) throws ApiException {
        okhttp3.Call localVarCall = getDraftByIdValidateBeforeCall(draftId, targetLanguage, accept, null);
        Type localVarReturnType = new TypeToken<DraftRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Draft by ID (asynchronously)
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     * @param draftId A draft ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A draft object with the requested ID. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftByIdAsync(String draftId, String targetLanguage, String accept, final ApiCallback<DraftRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftByIdValidateBeforeCall(draftId, targetLanguage, accept, _callback);
        Type localVarReturnType = new TypeToken<DraftRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDraftLocalizationKeys
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Localization keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftLocalizationKeysCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizationKeys"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftLocalizationKeysValidateBeforeCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling getDraftLocalizationKeys(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getDraftLocalizationKeys(Async)");
        }
        

        okhttp3.Call localVarCall = getDraftLocalizationKeysCall(draftId, accept, _callback);
        return localVarCall;

    }

    /**
     * Get localization keys
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.11+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.11+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return List&lt;LocalizationKeyRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Localization keys </td><td>  -  </td></tr>
     </table>
     */
    public List<LocalizationKeyRead> getDraftLocalizationKeys(String draftId, String accept) throws ApiException {
        ApiResponse<List<LocalizationKeyRead>> localVarResp = getDraftLocalizationKeysWithHttpInfo(draftId, accept);
        return localVarResp.getData();
    }

    /**
     * Get localization keys
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.11+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.11+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;List&lt;LocalizationKeyRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Localization keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LocalizationKeyRead>> getDraftLocalizationKeysWithHttpInfo(String draftId, String accept) throws ApiException {
        okhttp3.Call localVarCall = getDraftLocalizationKeysValidateBeforeCall(draftId, accept, null);
        Type localVarReturnType = new TypeToken<List<LocalizationKeyRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get localization keys (asynchronously)
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.11+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.11+x-gettext-translation&#x60; to get the POT file.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Localization keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftLocalizationKeysAsync(String draftId, String accept, final ApiCallback<List<LocalizationKeyRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftLocalizationKeysValidateBeforeCall(draftId, accept, _callback);
        Type localVarReturnType = new TypeToken<List<LocalizationKeyRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDrafts
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param status Filter the list of drafts by a particular status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Drafts </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftsCall(String accept, String cursor, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftsValidateBeforeCall(String accept, String cursor, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getDrafts(Async)");
        }
        

        okhttp3.Call localVarCall = getDraftsCall(accept, cursor, status, _callback);
        return localVarCall;

    }

    /**
     * List Drafts
     * Returns all drafts for your organization.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param status Filter the list of drafts by a particular status (optional)
     * @return DraftsRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Drafts </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public DraftsRead getDrafts(String accept, String cursor, String status) throws ApiException {
        ApiResponse<DraftsRead> localVarResp = getDraftsWithHttpInfo(accept, cursor, status);
        return localVarResp.getData();
    }

    /**
     * List Drafts
     * Returns all drafts for your organization.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param status Filter the list of drafts by a particular status (optional)
     * @return ApiResponse&lt;DraftsRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Drafts </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<DraftsRead> getDraftsWithHttpInfo(String accept, String cursor, String status) throws ApiException {
        okhttp3.Call localVarCall = getDraftsValidateBeforeCall(accept, cursor, status, null);
        Type localVarReturnType = new TypeToken<DraftsRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Drafts (asynchronously)
     * Returns all drafts for your organization.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param status Filter the list of drafts by a particular status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Drafts </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDraftsAsync(String accept, String cursor, String status, final ApiCallback<DraftsRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftsValidateBeforeCall(accept, cursor, status, _callback);
        Type localVarReturnType = new TypeToken<DraftsRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocalizationForDraft
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of localizations </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalizationForDraftCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocalizationForDraftValidateBeforeCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling getLocalizationForDraft(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getLocalizationForDraft(Async)");
        }
        

        okhttp3.Call localVarCall = getLocalizationForDraftCall(draftId, accept, _callback);
        return localVarCall;

    }

    /**
     * Get localizations on a draft
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return List&lt;LocalizationMetaRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of localizations </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
     </table>
     */
    public List<LocalizationMetaRead> getLocalizationForDraft(String draftId, String accept) throws ApiException {
        ApiResponse<List<LocalizationMetaRead>> localVarResp = getLocalizationForDraftWithHttpInfo(draftId, accept);
        return localVarResp.getData();
    }

    /**
     * Get localizations on a draft
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;List&lt;LocalizationMetaRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of localizations </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<LocalizationMetaRead>> getLocalizationForDraftWithHttpInfo(String draftId, String accept) throws ApiException {
        okhttp3.Call localVarCall = getLocalizationForDraftValidateBeforeCall(draftId, accept, null);
        Type localVarReturnType = new TypeToken<List<LocalizationMetaRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get localizations on a draft (asynchronously)
     * Returns localization metadata for the draft
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of localizations </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalizationForDraftAsync(String draftId, String accept, final ApiCallback<List<LocalizationMetaRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocalizationForDraftValidateBeforeCall(draftId, accept, _callback);
        Type localVarReturnType = new TypeToken<List<LocalizationMetaRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveLocalization
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upsert </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveLocalizationCall(String draftId, String languageId, String accept, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", localVarApiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveLocalizationValidateBeforeCall(String draftId, String languageId, String accept, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling saveLocalization(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling saveLocalization(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling saveLocalization(Async)");
        }
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling saveLocalization(Async)");
        }
        

        okhttp3.Call localVarCall = saveLocalizationCall(draftId, languageId, accept, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Create or update a localization
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upsert </td><td>  -  </td></tr>
     </table>
     */
    public void saveLocalization(String draftId, String languageId, String accept, InlineObject inlineObject) throws ApiException {
        saveLocalizationWithHttpInfo(draftId, languageId, accept, inlineObject);
    }

    /**
     * Create or update a localization
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upsert </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveLocalizationWithHttpInfo(String draftId, String languageId, String accept, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = saveLocalizationValidateBeforeCall(draftId, languageId, accept, inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update a localization (asynchronously)
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful upsert </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveLocalizationAsync(String draftId, String languageId, String accept, InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveLocalizationValidateBeforeCall(draftId, languageId, accept, inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setTranslation
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setTranslationCall(String draftId, String languageId, String accept, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/localizations/{languageId}/translations"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()))
            .replaceAll("\\{" + "languageId" + "\\}", localVarApiClient.escapeString(languageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTranslationValidateBeforeCall(String draftId, String languageId, String accept, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling setTranslation(Async)");
        }
        
        // verify the required parameter 'languageId' is set
        if (languageId == null) {
            throw new ApiException("Missing the required parameter 'languageId' when calling setTranslation(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling setTranslation(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setTranslation(Async)");
        }
        

        okhttp3.Call localVarCall = setTranslationCall(draftId, languageId, accept, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Set translations for language
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param requestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public void setTranslation(String draftId, String languageId, String accept, Map<String, String> requestBody) throws ApiException {
        setTranslationWithHttpInfo(draftId, languageId, accept, requestBody);
    }

    /**
     * Set translations for language
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> setTranslationWithHttpInfo(String draftId, String languageId, String accept, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setTranslationValidateBeforeCall(draftId, languageId, accept, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set translations for language (asynchronously)
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param draftId A draft ID (required)
     * @param languageId A language ID (eg: en-US) (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setTranslationAsync(String draftId, String languageId, String accept, Map<String, String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTranslationValidateBeforeCall(draftId, languageId, accept, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitDraftForApproval
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call submitDraftForApprovalCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drafts/{draftId}/publishRequest"
            .replaceAll("\\{" + "draftId" + "\\}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.11+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitDraftForApprovalValidateBeforeCall(String draftId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling submitDraftForApproval(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling submitDraftForApproval(Async)");
        }
        

        okhttp3.Call localVarCall = submitDraftForApprovalCall(draftId, accept, _callback);
        return localVarCall;

    }

    /**
     * Submit the draft for approval
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public void submitDraftForApproval(String draftId, String accept) throws ApiException {
        submitDraftForApprovalWithHttpInfo(draftId, accept);
    }

    /**
     * Submit the draft for approval
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitDraftForApprovalWithHttpInfo(String draftId, String accept) throws ApiException {
        okhttp3.Call localVarCall = submitDraftForApprovalValidateBeforeCall(draftId, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Submit the draft for approval (asynchronously)
     * Moves the draft into submitted state.
     * @param draftId A draft ID (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.11\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.11+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call submitDraftForApprovalAsync(String draftId, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitDraftForApprovalValidateBeforeCall(draftId, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
