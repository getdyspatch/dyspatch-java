/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.04
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiCallback;
import io.dyspatch.client.ApiClient;
import io.dyspatch.client.ApiException;
import io.dyspatch.client.ApiResponse;
import io.dyspatch.client.Configuration;
import io.dyspatch.client.Pair;
import io.dyspatch.client.ProgressRequestBody;
import io.dyspatch.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.TemplateRead;
import io.dyspatch.client.model.TemplatesRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getTemplateById
     * @param templateId A template ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A template object with the requested ID. If the template has no published content the \&quot;compiled\&quot; field will be *null*. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByIdCall(String templateId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replaceAll("\\{" + "templateId" + "\\}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.04+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByIdValidateBeforeCall(String templateId, String targetLanguage, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateById(Async)");
        }
        
        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling getTemplateById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTemplateById(Async)");
        }
        

        okhttp3.Call localVarCall = getTemplateByIdCall(templateId, targetLanguage, accept, _callback);
        return localVarCall;

    }

    /**
     * Get Template by ID
     * Gets a template object with the matching ID. If the template has published content the \&quot;compiled\&quot; field will contain the template .
     * @param templateId A template ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @return TemplateRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A template object with the requested ID. If the template has no published content the \&quot;compiled\&quot; field will be *null*. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public TemplateRead getTemplateById(String templateId, String targetLanguage, String accept) throws ApiException {
        ApiResponse<TemplateRead> localVarResp = getTemplateByIdWithHttpInfo(templateId, targetLanguage, accept);
        return localVarResp.getData();
    }

    /**
     * Get Template by ID
     * Gets a template object with the matching ID. If the template has published content the \&quot;compiled\&quot; field will contain the template .
     * @param templateId A template ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @return ApiResponse&lt;TemplateRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A template object with the requested ID. If the template has no published content the \&quot;compiled\&quot; field will be *null*. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<TemplateRead> getTemplateByIdWithHttpInfo(String templateId, String targetLanguage, String accept) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(templateId, targetLanguage, accept, null);
        Type localVarReturnType = new TypeToken<TemplateRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template by ID (asynchronously)
     * Gets a template object with the matching ID. If the template has published content the \&quot;compiled\&quot; field will contain the template .
     * @param templateId A template ID (required)
     * @param targetLanguage The type of templating language to compile as. Should only be used for visual templates. (required)
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A template object with the requested ID. If the template has no published content the \&quot;compiled\&quot; field will be *null*. </td><td>  * X-RateLimit-Remaining - The number of requests left for the current time window <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByIdAsync(String templateId, String targetLanguage, String accept, final ApiCallback<TemplateRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(templateId, targetLanguage, accept, _callback);
        Type localVarReturnType = new TypeToken<TemplateRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplates
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of templates </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatesCall(String accept, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/vnd.dyspatch.2020.04+json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplatesValidateBeforeCall(String accept, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = getTemplatesCall(accept, cursor, _callback);
        return localVarCall;

    }

    /**
     * List Templates
     * Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @return TemplatesRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of templates </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public TemplatesRead getTemplates(String accept, String cursor) throws ApiException {
        ApiResponse<TemplatesRead> localVarResp = getTemplatesWithHttpInfo(accept, cursor);
        return localVarResp.getData();
    }

    /**
     * List Templates
     * Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @return ApiResponse&lt;TemplatesRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of templates </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesRead> getTemplatesWithHttpInfo(String accept, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(accept, cursor, null);
        Type localVarReturnType = new TypeToken<TemplatesRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Templates (asynchronously)
     * Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
     * @param accept A version of the API that should be used for the request. For example, to use version \&quot;2020.04\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.04+json\&quot; (required)
     * @param cursor A cursor value used to retrieve a specific page from a paginated result set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of templates </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
        <tr><td> 0 </td><td> Server error </td><td>  * X-RateLimit-Remaining - The number of requests left for the time window. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplatesAsync(String accept, String cursor, final ApiCallback<TemplatesRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplatesValidateBeforeCall(accept, cursor, _callback);
        Type localVarReturnType = new TypeToken<TemplatesRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
