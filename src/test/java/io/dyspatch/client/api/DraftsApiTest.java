/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiException;
import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.Body;
import io.dyspatch.client.model.Body1;
import io.dyspatch.client.model.DraftRead;
import io.dyspatch.client.model.DraftsRead;
import io.dyspatch.client.model.LocalizationKeyRead;
import io.dyspatch.client.model.LocalizationMetaRead;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DraftsApi
 */
@Ignore
public class DraftsApiTest {

    private final DraftsApi api = new DraftsApi();

    
    /**
     * Get Draft by ID
     *
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdGetTest() throws ApiException {
        String draftId = null;
        String targetLanguage = null;
        DraftRead response = api.draftsDraftIdGet(draftId, targetLanguage);

        // TODO: test validations
    }
    
    /**
     * Get localization keys
     *
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdLocalizationKeysGetTest() throws ApiException {
        String draftId = null;
        String accept = null;
        List<LocalizationKeyRead> response = api.draftsDraftIdLocalizationKeysGet(draftId, accept);

        // TODO: test validations
    }
    
    /**
     * Get localizations on a draft
     *
     * Returns localization metadata for the draft
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdLocalizationsGetTest() throws ApiException {
        String draftId = null;
        List<LocalizationMetaRead> response = api.draftsDraftIdLocalizationsGet(draftId);

        // TODO: test validations
    }
    
    /**
     * Remove a localization
     *
     * Deletes the localization with the given language ID if it exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdLocalizationsLanguageIdDeleteTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        api.draftsDraftIdLocalizationsLanguageIdDelete(draftId, languageId);

        // TODO: test validations
    }
    
    /**
     * Create or update a localization
     *
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdLocalizationsLanguageIdPutTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        Body body = null;
        api.draftsDraftIdLocalizationsLanguageIdPut(draftId, languageId, body);

        // TODO: test validations
    }
    
    /**
     * Set translations for language
     *
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdLocalizationsLanguageIdTranslationsPutTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        Body1 body = null;
        api.draftsDraftIdLocalizationsLanguageIdTranslationsPut(draftId, languageId, body);

        // TODO: test validations
    }
    
    /**
     * Submit the draft for approval
     *
     * Moves the draft into submitted state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsDraftIdPublishRequestPostTest() throws ApiException {
        String draftId = null;
        api.draftsDraftIdPublishRequestPost(draftId);

        // TODO: test validations
    }
    
    /**
     * List Drafts
     *
     * Returns all drafts for your organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void draftsGetTest() throws ApiException {
        String status = null;
        DraftsRead response = api.draftsGet(status);

        // TODO: test validations
    }
    
}
