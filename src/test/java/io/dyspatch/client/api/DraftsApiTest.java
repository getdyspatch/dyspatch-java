/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.04
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.dyspatch.client.api;

import io.dyspatch.client.ApiException;
import io.dyspatch.client.model.APIError;
import io.dyspatch.client.model.DraftRead;
import io.dyspatch.client.model.DraftsRead;
import io.dyspatch.client.model.InlineObject;
import io.dyspatch.client.model.LocalizationKeyRead;
import io.dyspatch.client.model.LocalizationMetaRead;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DraftsApi
 */
@Ignore
public class DraftsApiTest {

    private final DraftsApi api = new DraftsApi();

    
    /**
     * Remove a localization
     *
     * Deletes the localization with the given language ID if it exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocalizationTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        String accept = null;
        api.deleteLocalization(draftId, languageId, accept);

        // TODO: test validations
    }
    
    /**
     * Get Draft by ID
     *
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the template in the default, unlocalized form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDraftByIdTest() throws ApiException {
        String draftId = null;
        String targetLanguage = null;
        String accept = null;
        DraftRead response = api.getDraftById(draftId, targetLanguage, accept);

        // TODO: test validations
    }
    
    /**
     * Get localization keys
     *
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2020.04+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2020.04+x-gettext-translation&#x60; to get the POT file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDraftLocalizationKeysTest() throws ApiException {
        String draftId = null;
        String accept = null;
        List<LocalizationKeyRead> response = api.getDraftLocalizationKeys(draftId, accept);

        // TODO: test validations
    }
    
    /**
     * List Drafts
     *
     * Returns all drafts for your organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDraftsTest() throws ApiException {
        String accept = null;
        String cursor = null;
        String status = null;
        DraftsRead response = api.getDrafts(accept, cursor, status);

        // TODO: test validations
    }
    
    /**
     * Get localizations on a draft
     *
     * Returns localization metadata for the draft
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalizationForDraftTest() throws ApiException {
        String draftId = null;
        String accept = null;
        List<LocalizationMetaRead> response = api.getLocalizationForDraft(draftId, accept);

        // TODO: test validations
    }
    
    /**
     * Create or update a localization
     *
     * Inserts a localization or sets the name on an existing localization that already uses the languageId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveLocalizationTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        String accept = null;
        InlineObject inlineObject = null;
        api.saveLocalization(draftId, languageId, accept, inlineObject);

        // TODO: test validations
    }
    
    /**
     * Set translations for language
     *
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setTranslationTest() throws ApiException {
        String draftId = null;
        String languageId = null;
        String accept = null;
        Map<String, String> requestBody = null;
        api.setTranslation(draftId, languageId, accept, requestBody);

        // TODO: test validations
    }
    
    /**
     * Submit the draft for approval
     *
     * Moves the draft into submitted state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitDraftForApprovalTest() throws ApiException {
        String draftId = null;
        String accept = null;
        api.submitDraftForApproval(draftId, accept);

        // TODO: test validations
    }
    
}
